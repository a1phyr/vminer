/* Generated by cbindgen, do not edit */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct Backend Backend;

typedef struct Error Error;

typedef struct Os Os;

typedef struct VirtualAddress {
  uint64_t val;
} VirtualAddress;

typedef struct Process {
  struct VirtualAddress addr;
} Process;

typedef struct Allocator {
  void *data;
  void *(*alloc)(void*, uintptr_t, uintptr_t);
  void (*dealloc)(void*, void*, uintptr_t, uintptr_t);
  void *(*realloc)(void*, void*, uintptr_t, uintptr_t, uintptr_t);
} Allocator;

struct Error *kvm_connect(int32_t pid, struct Backend **kvm);

struct Error *read_dump(const char *path, struct Backend **dump);

struct Error *os_new(struct Backend *backend, struct Os **os);

struct Error *os_current_process(const struct Os *os, uintptr_t cpuid, struct Process *proc);

struct Error *os_processes(const struct Os *os, struct Process *procs, uintptr_t *n_procs);

struct Error *process_name(const struct Os *os, struct Process proc, char *name, uintptr_t max_len);

struct Error *process_pid(const struct Os *os, struct Process proc, uint32_t *pid);

void backend_free(struct Backend *backend);

void os_free(struct Os *os);

void set_allocator(const struct Allocator *allocator);

void get_allocator(struct Allocator *allocator);

void *allocate(uintptr_t size, uintptr_t align);

void deallocate(void *ptr, uintptr_t size, uintptr_t align);

void *reallocate(void *ptr, uintptr_t size, uintptr_t align, uintptr_t new_size);

struct Error *error_with_message(struct Error *err, char *context);

struct Error *error_missing_symbol(char *sym);

uintptr_t error_print(const struct Error *err, char *str, uintptr_t max_len);

void error_free(struct Error *err);
